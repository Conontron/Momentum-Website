"use strict";(globalThis["webpackChunkmomentum_fw_dev"]=globalThis["webpackChunkmomentum_fw_dev"]||[]).push([[573],{2573:(e,t,s)=>{s.r(t),s.d(t,{default:()=>L});var o=s(9835);const n={key:0,class:"flex-center column q-my-xl"},i=(0,o._)("p",null,"Waiting for Flipper...",-1),a={key:1,class:"column text-center q-px-lg q-py-lg"},r=(0,o._)("h5",null,"Unsupported browser",-1),l=(0,o._)("p",null,[(0,o.Uk)(" Your browser doesn't support WebSerial API. For better experience we recommend using Chrome for desktop."),(0,o._)("br"),(0,o._)("a",{style:{color:"#a883e9"},href:"https://caniuse.com/web-serial"},"Full list of supported browsers")],-1),c=[r,l];function g(e,t,s,r,l,g){const p=(0,o.up)("router-view"),f=(0,o.up)("q-btn"),h=(0,o.up)("q-spinner"),d=(0,o.up)("q-page"),u=(0,o.up)("q-page-container"),m=(0,o.up)("q-layout");return(0,o.wg)(),(0,o.j4)(m,{view:"hhh LpR fff"},{default:(0,o.w5)((()=>[(0,o.Wm)(u,{class:"flex justify-center"},{default:(0,o.w5)((()=>[e.flags.updateInProgress||e.flags.serialSupported&&null!==e.info&&this.info.storage_databases_present?((0,o.wg)(),(0,o.j4)(p,{key:0,flipper:e.flipper,rpcActive:e.flags.rpcActive,connected:e.flags.connected,info:e.info,onSetRpcStatus:e.setRpcStatus,onSetInfo:e.setInfo,onUpdate:e.onUpdateStage,onShowNotif:e.showNotif,onLog:e.log},null,8,["flipper","rpcActive","connected","info","onSetRpcStatus","onSetInfo","onUpdate","onShowNotif","onLog"])):((0,o.wg)(),(0,o.j4)(d,{key:1,class:"flex-center column"},{default:(0,o.w5)((()=>[!e.flags.serialSupported||e.flags.connected&&null!=e.info&&e.flags.rpcActive&&!e.flags.rpcToggling?(0,o.kq)("",!0):((0,o.wg)(),(0,o.iD)("div",n,[e.flags.portSelectRequired||!e.flags.connected&&!e.flags.portSelectRequired?((0,o.wg)(),(0,o.j4)(f,{key:0,onClick:t[0]||(t[0]=t=>e.flags.portSelectRequired?e.selectPort():e.start(!0)),flat:"",class:"q-mt-md main-btn"},{default:(0,o.w5)((()=>[(0,o.Uk)(" Connect ")])),_:1})):((0,o.wg)(),(0,o.iD)(o.HY,{key:1},[(0,o.Wm)(h,{color:"primary",size:"3em",class:"q-mb-md"}),i],64))])),e.flags.serialSupported?(0,o.kq)("",!0):((0,o.wg)(),(0,o.iD)("div",a,c))])),_:1}))])),_:1})])),_:1})}s(9665);var p=s(499),f=s(9302),h=s(9944),d=s(5186),u=s(3521),m=s.n(u);let w;const v=(0,o.aZ)({name:"UpdateLayout",setup(){const e=(0,f.Z)();return{flipper:(0,p.iH)(h),info:(0,p.iH)(null),flags:(0,p.iH)({serialSupported:!1,portSelectRequired:!1,connected:!1,rpcActive:!1,updateInProgress:!1,settingsView:!1}),reconnectLoop:(0,p.iH)(null),connectionStatus:(0,p.iH)("Ready to connect"),logger:m(),notify:e.notify}},methods:{async connect(){await this.flipper.connect().then((()=>{this.flags.portSelectRequired=!1,this.connectionStatus="Flipper connected",this.flags.connected=!0,this.log({level:"info",message:"Main: Flipper connected"}),w&&w()})).catch((e=>{"Error: No known ports"===e.toString()?this.flags.portSelectRequired=!0:this.connectionStatus=e.toString()}))},async selectPort(){const e=[{usbVendorId:1155,usbProductId:22336}];return await navigator.serial.requestPort({filters:e}),this.start(!0)},async disconnect(){await this.flipper.disconnect().then((()=>{this.connectionStatus="Disconnected",this.flags.connected=!1,this.info=null,this.textInfo=""})).catch((async e=>{if(e.toString().includes("Cannot cancel a locked stream"))return this.flags.rpcActive?await this.stopRpc():(this.flipper.closeReader(),await(0,d.Z)(300)),this.disconnect();this.connectionStatus=e.toString()})),this.log({level:"info",message:"Main: Flipper disconnected"})},async startRpc(){this.flags.rpcToggling=!0;const e=await this.flipper.commands.startRpcSession(this.flipper);if(!e.resolved||e.error)throw new Error("Couldn't start rpc session");this.flags.rpcActive=!0,this.flags.rpcToggling=!1,this.log({level:"info",message:"Main: RPC started"})},async stopRpc(){this.flags.rpcToggling=!0,await this.flipper.commands.stopRpcSession(),this.flags.rpcActive=!1,this.flags.rpcToggling=!1,this.log({level:"info",message:"Main: RPC stopped"})},async readInfo(){this.info={};let e=await this.flipper.commands.system.deviceInfo().catch((e=>this.rpcErrorHandler(e,"system.deviceInfo"))).finally((()=>{this.$emit("log",{level:"debug",message:"Main: system.deviceInfo: OK"})}));for(const t of e)this.info[t.key]=t.value;e=await this.flipper.commands.system.powerInfo().catch((e=>this.rpcErrorHandler(e,"system.powerInfo"))).finally((()=>{this.$emit("log",{level:"debug",message:"Main: system.powerInfo: OK"})}));for(const t of e)this.info[t.key]=t.value;if(await(0,d.Z)(300),e=await this.flipper.commands.storage.list("/ext").catch((e=>this.rpcErrorHandler(e,"storage.list"))).finally((()=>{this.$emit("log",{level:"debug",message:"Main: storage.list: /ext"})})),e&&"object"===typeof e&&e.length){const t=e.find((e=>"Manifest"===e.name));this.info.storage_databases_present=t?"installed":"missing",e=await this.flipper.commands.storage.info("/ext").catch((e=>this.rpcErrorHandler(e,"storage.info"))).finally((()=>{this.$emit("log",{level:"debug",message:"Main: storage.info: /ext"})})),this.info.storage_sdcard_present="installed",this.info.storage_sdcard_totalSpace=e.totalSpace,this.info.storage_sdcard_freeSpace=e.freeSpace}else this.info.storage_sdcard_present="missing",this.info.storage_databases_present="missing";await(0,d.Z)(200),e=await this.flipper.commands.storage.info("/int").catch((e=>this.rpcErrorHandler(e,"storage.info"))).finally((()=>{this.$emit("log",{level:"debug",message:"Main: storage.info: /int"})})),this.info.storage_internal_totalSpace=e.totalSpace,this.info.storage_internal_freeSpace=e.freeSpace,this.log({level:"info",message:"Main: Fetched device info"})},findKnownDevices(){const e=[{usbVendorId:1155,usbProductId:22336}];return navigator.serial.getPorts({filters:e})},autoReconnect(){this.reconnectLoop&&(clearInterval(this.reconnectLoop),this.reconnectLoop=null),this.reconnectLoop=setInterval((async()=>{const e=await this.findKnownDevices();if(e&&e.length>0)return clearInterval(this.reconnectLoop),this.reconnectLoop=null,await this.start()}),3e3)},setRpcStatus(e){this.flags.rpcActive=e},setInfo(e){this.info=e},onUpdateStage(e){"start"===e?this.flags.updateInProgress=!0:"end"===e&&(this.flags.updateInProgress=!1)},showNotif({message:e,color:t,reloadBtn:s}){const o=[];s&&o.push({label:"Reload",color:"white",handler:()=>{location.reload()}}),0===o.length?o.push({icon:"close",color:"white",class:"q-px-sm"}):o.push({label:"Dismiss",color:"white"}),w=this.notify({message:e,color:t,textColor:"white",position:"bottom-right",timeout:0,group:!0,actions:o})},log({level:e,message:t}){switch(e){case"error":this.logger.error(t);break;case"warn":this.logger.warn(t);break;case"info":this.logger.info(t);break;case"debug":this.logger.debug(t);break}},rpcErrorHandler(e,t){e=e.toString(),this.showNotif({message:`RPC error in command '${t}': ${e}`,color:"negative"}),this.log({level:"error",message:`Main: RPC error in command '${t}': ${e}`})},async start(e){const t=await this.findKnownDevices();if(t&&t.length>0)await this.connect(),await this.startRpc(),await this.readInfo();else if(this.flags.portSelectRequired=!0,e)return this.selectPort()}},async mounted(){"serial"in navigator&&(this.flags.serialSupported=!0,await this.start(),navigator.serial.addEventListener("disconnect",(e=>{this.autoReconnect()})),navigator.serial.addEventListener("disconnect",(e=>{this.flags.updateInProgress||(this.showNotif({message:"Flipper has been disconnected"}),this.flags.connected=!1,this.flags.portSelectRequired=!0),this.log({level:"info",message:"Main: Flipper has been disconnected"})}))),this.logger.setLevel("debug",!0);const e=this.logger.methodFactory;this.logger.methodFactory=function(t,s,o){const n=e(t,s,o);return function(e){"debug"!==t&&n(e)}}}});var S=s(1639),y=s(1967),b=s(2133),_=s(9885),R=s(4455),I=s(3940),k=s(9984),q=s.n(k);const P=(0,S.Z)(v,[["render",g]]),L=P;q()(v,"components",{QLayout:y.Z,QPageContainer:b.Z,QPage:_.Z,QBtn:R.Z,QSpinner:I.Z})}}]);